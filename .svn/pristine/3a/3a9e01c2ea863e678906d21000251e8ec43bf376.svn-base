package com.infotel.controller;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.infotel.dto.*;
import com.infotel.service.*;
import com.infotel.entity.*;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/infotel")
public class DataCreateController {
	
	private final Logger log = LoggerFactory.getLogger(DataCreateController.class);
	private final DispositifService dispositifService;
	private final OrganismeService organismeService;
	private final EquipeService equipeService;
	private final NiveauService niveauService;
	private final RessourceService resService;
	private final HistoriqueresService histService;
	private final DomaineService domaineService;
	private final CompetenceService compService;
	private final RegleService regleService;
	private final RessourcehascompetenceService rcService;
	private final AutoCompleteService acService;
	private final DispositifhascompetenceService dcService;
	
	public DataCreateController(DispositifService dispositifService, OrganismeService orgService,EquipeService equipeService,
			NiveauService niveauService, RessourceService resService, HistoriqueresService histService, DomaineService domaineService,
			CompetenceService compService, RegleService regleService, RessourcehascompetenceService rcService,
			AutoCompleteService acService, DispositifhascompetenceService dcService) {
		this.dispositifService=dispositifService;this.organismeService=orgService;this.equipeService=equipeService;
		this.niveauService=niveauService;this.resService=resService;this.histService=histService;this.domaineService=domaineService;
		this.compService=compService;this.regleService=regleService;this.rcService=rcService;this.acService=acService;
		this.dcService=dcService;
	}
	
	@PostMapping("/initialize")
	public ResponseEntity<?> initialize(){
		System.out.println("DÃ©but initialisation");
		domaineService.initialize();
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createDispositif")
	public ResponseEntity<?> createDispositif(@RequestBody DispositifDTO disp){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Organisme org = organismeService.getByNom(disp.getOrganisme());
		Dispositif d = disp.toEntity();
		d.setOrganisme(org);
		dispositifService.create(d);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createOrganisme")
	public ResponseEntity<?> createOrganisme(@RequestBody OrganismeDTO org){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		organismeService.create(org.toEntity());
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createEquipe")
	public ResponseEntity<?> createEquipe(@RequestBody EquipeDTO equipe){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Equipe e = equipe.toEntity();
		Dispositif disp = dispositifService.getByNom(equipe.getDispositif());
		e.setDispositif(disp);
		equipeService.create(e);
			return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createNiveaux")
	public ResponseEntity<?> createNiveau(@RequestBody List<NiveauDTO> niveaux){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		for(NiveauDTO niveau: niveaux) {
			Organisme org = organismeService.getByNom(niveau.getOrganisme());
			Niveau n = niveau.toEntity(org);
			niveauService.create(n);
		}
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createRessource")
	public ResponseEntity<?> createRessource(@Valid @RequestBody RessourceDTO res){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Ressource r = res.toEntity();
		Equipe equipe = equipeService.getByNom(res.getEquipe());
		r.setEquipe(equipe);
		resService.create(r);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createHistorique")
	public ResponseEntity<?> createHistorique(@Valid @RequestBody HistoriqueDTO hist){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Ressource res = resService.getByNomAndPrenomAndEquipe(hist.getRnom(), hist.getRprenom(), hist.getEquipe());
		Historiqueres h = hist.toEntity(res);
		h.setId(hist.getId());
		h.setDateentree(hist.getDateentree());
		h.setDatesortie(hist.getDatesortie());
		h.setIsactif(hist.isActif());
		h.setIsactiveasbackup(hist.isActifasbackup());
		h.setRessource(res);
		histService.create(h);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createCompetence")
	public ResponseEntity<?> createCompetence(@Valid @RequestBody CompetenceDTO competence){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Competence c = competence.toEntity();
		Domaine domaine = domaineService.getByNom(competence.getDomaine());
		c.setDomaine(domaine);
		compService.create(c);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createCompetences")
	public ResponseEntity<?> createCompetences(@Valid @RequestBody List<CompetenceDTO> competences){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		for(CompetenceDTO competence : competences) {
			Competence c = competence.toEntity();
			Domaine domaine = domaineService.getByNom(competence.getDomaine());
			c.setDomaine(domaine);
			compService.create(c);
		}
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createRegle")
	public ResponseEntity<?> createRegle(@Valid @RequestBody RegleDTO regle){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Regle r = regle.toEntity();
		Competence comp = compService.getByNom(regle.getCnom());
		r.setCompetence(comp);
		Equipe equipe = equipeService.getByNom(regle.getEnom());
		r.setEquipe(equipe);
		List<Niveau> niveaux = niveauService.getByOrganisme(regle.getOrganisme());
		for(Niveau niveau: niveaux) {
			if(niveau.getValeur()==regle.getValeur())
				r.setNiveau(niveau);
		}
		regleService.create(r);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createRessourcehascompetence")
	public ResponseEntity<?> createRessourcehascompetence(@Valid @RequestBody RessourcehascompetenceDTO rc){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Ressourcehascompetence r = rc.toEntity();
		Competence comp = compService.getByNom(rc.getCnom());
		r.setCompetence(comp);
		Ressource res = resService.getByNomAndPrenomAndEquipe(rc.getRnom(), rc.getRprenom(), rc.getEquipe());
		r.setRessource(res);
		r.setId(new RessourcehascompetencePK(res.getId(), comp.getId()));
		List<Niveau> niveaux = niveauService.getByOrganisme(rc.getOrganisme());
		for(Niveau niveau: niveaux) {
			if(niveau.getValeur()==rc.getNiveau()) {
				r.setNiveau(niveau);
			}				
		}
		rcService.create(r);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createRessourcehascompetences")
	public ResponseEntity<?> createRessourcehascompetences(@Valid @RequestBody List<RessourcehascompetenceDTO> rcs){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		for(RessourcehascompetenceDTO rc : rcs) {
			Ressourcehascompetence r = rc.toEntity();
			Competence comp = compService.getByNom(rc.getCnom());
			r.setCompetence(comp);
			Ressource res = resService.getByNomAndPrenomAndEquipe(rc.getRnom(), rc.getRprenom(), rc.getEquipe());
			r.setRessource(res);
			r.setId(new RessourcehascompetencePK(res.getId(), comp.getId()));
			List<Niveau> niveaux = niveauService.getByOrganisme(rc.getOrganisme());
			for(Niveau niveau: niveaux) {
				if(niveau.getValeur()==rc.getNiveau()) {
					r.setNiveau(niveau);
				}			
			}
			rcService.create(r);
		}
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createAutoComplete")
	public ResponseEntity<?> createAutoComplete(@Valid @RequestBody AutoComplete ac){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		acService.create(ac.getValue());
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createDispositifhascompetence")
	public ResponseEntity<?> createDispositifhascompetence(@Valid @RequestBody DispositifhascompetenceDTO dc){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
			Dispositifhascompetence d = dc.toEntity();
			Competence comp = compService.getByNom(dc.getCompetence());
			d.setCompetence(comp);
			Dispositif disp = dispositifService.getByNom(dc.getDispositif());
			d.setDispositif(disp);
			d.setId(new DispositifhascompetencePK(disp.getId(), comp.getId()));
			dcService.create(d);
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
	
	@PostMapping("/createDispositifhascompetences")
	public ResponseEntity<?> createDispositifhascompetences(@Valid @RequestBody List<DispositifhascompetenceDTO> dcs){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		for(DispositifhascompetenceDTO dc : dcs) {
			Dispositifhascompetence d = dc.toEntity();
			Competence comp = compService.getByNom(dc.getCompetence());
			d.setCompetence(comp);
			Dispositif disp = dispositifService.getByNom(dc.getDispositif());
			d.setDispositif(disp);
			d.setId(new DispositifhascompetencePK(disp.getId(), comp.getId()));
			dcService.create(d);
		}
		return new ResponseEntity<>(headers,HttpStatus.CREATED);
	}
}
