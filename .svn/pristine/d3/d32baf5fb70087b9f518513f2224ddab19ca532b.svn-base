package com.infotel.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.infotel.dto.CompetenceDTO;
import com.infotel.dto.DomaineDTO;
import com.infotel.dto.EquipeDTO;
import com.infotel.dto.OrganismeDTO;
import com.infotel.dto.RegleDTO;
import com.infotel.dto.RessourceDTO;
import com.infotel.entity.Competence;
import com.infotel.entity.Domaine;
import com.infotel.entity.Equipe;
import com.infotel.entity.Niveau;
import com.infotel.entity.Organisme;
import com.infotel.entity.Regle;
import com.infotel.entity.Ressource;
import com.infotel.entity.Ressourcehascompetence;
import com.infotel.repository.CompetenceRepository;

@Service
public class CompetenceService {
	
	private final CompetenceRepository compRep;
	private final DomaineService domaineService;
	private final RegleService regleService;
	private final RessourcehascompetenceService rcService;
	
	public CompetenceService(CompetenceRepository compRep, DomaineService domaineService, RegleService regleService,
			RessourcehascompetenceService rcService) {
		this.compRep=compRep;this.domaineService=domaineService;this.regleService=regleService;this.rcService=rcService;
	}
	
	public void clear() {
		compRep.deleteAll();
	}
	
	public void create(Competence comp, String nom) {
		compRep.save(comp);
		Domaine domaine = domaineService.getByNom(nom);
		List<Competence> competences = domaine.getCompetences();
		competences.add(comp);
		domaine.setCompetences(competences);
		domaineService.update(domaine.getId(), domaine);
	}
	
	public ArrayList<Competence> getAll(){
		return compRep.findAll();
	}
	
	public Competence getById(int id)  {
		return compRep.findByid(id);
	}
	
	public Competence update(int id,Competence comp)  {
		Competence d = compRep.findByid(id);
		if(d==null)
			return null;
		else {
			d.setDomaine(comp.getDomaine());
			d.setRegles(comp.getRegles());
			d.setNom(comp.getNom());
			d.setRessourcehascompetences(comp.getRessourcehascompetences());
			Competence f = compRep.save(d);
			return f;
		}
	}
	
	public void delete(int id)  {
		Competence d = compRep.findByid(id);
		if(d!=null)
			compRep.delete(d);
	}
	
	public List<Competence> getByDomaine(String nom) {
		Domaine domaine = domaineService.getByNom(nom);
		return domaine.getCompetences();
	}
	
	public Competence getByNom(String nom) {
		return compRep.findBynom(nom);
	}
	
	public List<Competence> getByRessource(String nom,String prenom) {
		Ressource r = rcService.getRessourceService().getByNomAndPrenom(nom, prenom);
		if(r==null)
			return new ArrayList<>();
		List<Competence> list = new ArrayList<>();
		for(Ressourcehascompetence rc : r.getRessourcehascompetences()) {
			list.add(rc.getCompetence());
		}
		return list;
	}

	public List<Competence> getByRessourceAndNiveau(String nom,String prenom,int valeur,String orgNom) {
		Ressource r = rcService.getRessourceService().getByNomAndPrenom(nom, prenom);
		if(r==null)
			return null;
		Organisme org = rcService.getNiveauService().getOrganismeService().getByNom(orgNom);
		if(org==null)
			return null;
		Niveau n = org.getNiveaus().get(valeur);
		if(n==null)
			return null;
		List<Competence> competences = new ArrayList<>();
		for(Ressourcehascompetence rc : r.getRessourcehascompetences()) {
			if(rc.getNiveau().getValeur()==n.getId() && rc.getNiveau().getOrganisme().getOrganisme().equals(org.getOrganisme())) {
				competences.add(rc.getCompetence());
			}
		}
		return competences;
	}

	public List<Competence> getByEquipeAndNiveau(String nom,int valeur,String orgNom) {
		Equipe e = regleService.getEquipeService().getByNom(nom);
		if(e==null)
			return new ArrayList<>();
		Organisme org = regleService.getNiveauService().getOrganismeService().getByNom(orgNom);
		if(org==null)
			return new ArrayList<>();
		Niveau n = org.getNiveaus().get(valeur);
		if(n==null)
			return new ArrayList<>();
		List<Competence> list = new ArrayList<>();
		for(Regle r : regleService.getByEquipeAndNiveau(e, n)) {
			list.add(r.getCompetence());
		}
		return list;
	}
	
	public List<Competence> getByEquipe(String nom) {
		Equipe e = regleService.getEquipeService().getByNom(nom);
		if(e==null)
			return new ArrayList<>();
		List<Competence> list = new ArrayList<>();
		for(Regle r : e.getRegles()) {
			list.add(r.getCompetence());
		}
		return list;
	}

}
