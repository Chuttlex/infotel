package com.infotel.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.infotel.dto.EquipeDTO;
import com.infotel.entity.Equipe;
import com.infotel.service.EquipeService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/infotel/equipe")
public class DataGetEquipeController {
	
	private final Logger log = LoggerFactory.getLogger(DataCreateController.class);
	private final EquipeService equipeService;
	
	public DataGetEquipeController(EquipeService equipeService) {
		this.equipeService=equipeService;
	}
	
	@GetMapping("/ByNom")
	public ResponseEntity<?> getByNom(@RequestBody String nom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Equipe equipe = equipeService.getByNom(nom);
		return new ResponseEntity<>(equipe.toDTO(),headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByDispositif")
	public ResponseEntity<?> getByDispositif(@RequestBody String nom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		List<Equipe> equipes = equipeService.getByDispositif(nom);
		List<EquipeDTO> equipesDTO = new ArrayList<>();
		for(Equipe e : equipes) {
			equipesDTO.add(e.toDTO());
		}
		return new ResponseEntity<>(equipesDTO,headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByRessource")
	public ResponseEntity<?> getByRessource(@RequestBody String nom, @RequestBody String prenom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		Equipe equipe = equipeService.getByRessource(nom,prenom);
		return new ResponseEntity<>(equipe.toDTO(),headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByCompetence")
	public ResponseEntity<?> getByCompetence(@RequestBody String nom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		List<Equipe> equipes = equipeService.getByCompetence(nom);
		List<EquipeDTO> equipesDTO = new ArrayList<>();
		for(Equipe e : equipes) {
			equipesDTO.add(e.toDTO());
		}
		return new ResponseEntity<>(equipesDTO,headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByNiveau")
	public ResponseEntity<?> getByNiveau(@RequestBody int valeur,@RequestBody String orgnom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		List<Equipe> equipes = equipeService.getByNiveau(orgnom, valeur);
		List<EquipeDTO> equipesDTO = new ArrayList<>();
		for(Equipe e : equipes) {
			equipesDTO.add(e.toDTO());
		}
		return new ResponseEntity<>(equipesDTO,headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByCompetenceAndNiveau")
	public ResponseEntity<?> getByCompetenceAndNiveau(@RequestBody String nom,
			@RequestBody int valeur,@RequestBody String orgnom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		List<Equipe> equipes = equipeService.getByCompetenceAndNiveau(nom,orgnom,valeur);
		List<EquipeDTO> equipesDTO = new ArrayList<>();
		for(Equipe e : equipes) {
			equipesDTO.add(e.toDTO());
		}
		return new ResponseEntity<>(equipes,headers,HttpStatus.OK);
	}
	
	@GetMapping("/ByOrganisme")
	public ResponseEntity<?> getByOrganisme(@RequestBody String orgnom){
		HttpHeaders headers = new HttpHeaders();
		//headers.add("Access-Control-Allow-Origin", "*");
		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
		headers.add("Access-Control-Allow-Headers", "X-Requested-With,content-type");
		headers.add("Access-Control-Allow-Credentials", "true");
		List<Equipe> equipes = equipeService.getByOrganisme(orgnom);
		List<EquipeDTO> equipesDTO = new ArrayList<>();
		for(Equipe e : equipes) {
			equipesDTO.add(e.toDTO());
		}
		return new ResponseEntity<>(equipesDTO,headers,HttpStatus.OK);
	}

}
